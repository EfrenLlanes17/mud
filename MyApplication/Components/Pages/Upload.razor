@page "/upload"
@rendermode InteractiveServer

<PageTitle>Upload</PageTitle>

<MudFileUpload T="IBrowserFile" FilesChanged="FileUploaded">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload File
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

@if(file != null || Series.Count != 0){
<MudSimpleTable Style="overflow-x: auto;">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>File Size(bytes)</th>
                </tr>
            </thead>
            <tbody>
            <tr>
                    <td>@file.Name</td>
                    <td>@file.Size</td>
              </tr>  
    </tbody>
    </MudSimpleTable> 



    <MudSimpleTable Style="overflow-x: auto;">
    <thead>
        <tr>
            <th>Day of the Week</th>
            <th>Event Count</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var entry in eventsByDayOfWeek)
        {
            <tr>
                <td>@entry.Key</td>
                <td>@entry.Value.Count</td>
            </tr>
        }
    </tbody>
</MudSimpleTable>



    <div>
    <MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px" ChartOptions="@Options"/>
    <MudGrid>
        @* <MudItem xs="6">
            <MudText Typo="Typo.body1" Class="py-3">Selected: @(Index < 0 ? "None" : Series[Index].Name)</MudText>
        </MudItem>
        <MudItem xs="6">
            <MudSlider @bind-Value="Options.LineStrokeWidth" Min="1" Max="10" Color="Color.Info">Line Width: @Options.LineStrokeWidth.ToString()</MudSlider>
        </MudItem> *@
    </MudGrid>
</div>
}

@* <MudSimpleTable Style="overflow-x: auto;">
            <thead>
                <tr>
                    <th>Reader ID</th>
                    <th>Reader Name</th>
                    <th>Event Count</th>
                </tr>
            </thead>
            <tbody>
                   @foreach (var entry in readerEvents)
        {
            <tr>
                 <td>@entry.Key</td>
                <td>@entry.Value.FirstOrDefault()?.ReaderDesc</td>
                <td>@entry.Value.Count</td> 
            </tr>
        }
    </tbody>
</MudSimpleTable> *@




@code {
    public static IBrowserFile file { get; set; }
    public string FileName { get; set; } = "";
    public long FileSize { get; set; }
    public string FileType { get; set; } = "";
    public string ListSize { get; set; } = "";
    public DateTimeOffset LastModified { get; set; }
    public string ErrorMessage { get; set; } = "";

    const int MAX_FILESIZE = 5000 * 1024; // 5 MB

    private Dictionary<string, List<ReaderEvent>> readerEvents = new();
    private static Dictionary<string, List<ReaderEvent>> eventsByDayOfWeek = new();
    private List<ReaderEvent> Entries = new();



private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    public ChartOptions Options = new ChartOptions();
    
    public static List<ChartSeries> Series = new List<ChartSeries>()
    {
    };
    public string[] XAxisLabels = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };


    public async Task FileUploaded(IBrowserFile e)
    {
        var browserFile = e;
        file = browserFile;

        if (browserFile != null)
        {
            FileSize = browserFile.Size;
            FileType = browserFile.ContentType;
            FileName = browserFile.Name;
            LastModified = browserFile.LastModified;

            try
            {
                using var memoryStream = new MemoryStream();
                await browserFile.OpenReadStream(MAX_FILESIZE).CopyToAsync(memoryStream);

                memoryStream.Position = 0;
                using var reader = new StreamReader(memoryStream);

                string line;
                bool firstLine = true;
                Entries.Clear();

                while ((line = await reader.ReadLineAsync()) != null)
                {
                    if (!firstLine)
                    {
                        var columns = line.Split(',');
                        Entries.Add(new ReaderEvent(columns[0], columns[1], columns[2], columns[3], int.Parse(columns[4]), int.Parse(columns[5])));
                    }
                    else
                    {
                        firstLine = false;
                    }
                }

                ListSize = Entries.Count.ToString();
                readerEvents = OrganizeEventsByReader(Entries);
                eventsByDayOfWeek = OrganizeEventsByDayOfWeek(Entries);
            }
            catch (Exception exception)
            {
                ErrorMessage = exception.Message;
            }
        }
    }

    private Dictionary<string, List<ReaderEvent>> OrganizeEventsByReader(List<ReaderEvent> events)
    {
        var dictionary = new Dictionary<string, List<ReaderEvent>>();
        foreach (var evt in events)
        {
            string readerId = $"{evt.DevID}-{evt.Machine}";
            if (!dictionary.ContainsKey(readerId))
            {
                dictionary[readerId] = new List<ReaderEvent> { evt };
            }
            else
            {
                dictionary[readerId].Add(evt);
            }
        }
        return dictionary;
    }

    private Dictionary<string, List<ReaderEvent>> OrganizeEventsByDayOfWeek(List<ReaderEvent> events)
    {
        var dictionary = new Dictionary<string, List<ReaderEvent>>
        {
            {"Sunday", new List<ReaderEvent>()},
            {"Monday", new List<ReaderEvent>()},
            {"Tuesday", new List<ReaderEvent>()},
            {"Wednesday", new List<ReaderEvent>()},
            {"Thursday", new List<ReaderEvent>()},
            {"Friday", new List<ReaderEvent>()},
            {"Saturday", new List<ReaderEvent>()}
        };

        

        foreach (var evt in events)
        {
            if (DateTime.TryParse(evt.Time, out DateTime eventDate))
            {
                string dayOfWeek = eventDate.ToString("dddd");
                dictionary[dayOfWeek].Add(evt);
                
            }
        }
        Series.Add(new ChartSeries() { Name = "# of Entries", Data = new double[] { dictionary["Sunday"].Count, dictionary["Monday"].Count, dictionary["Tuesday"].Count, dictionary["Wednesday"].Count, dictionary["Thursday"].Count, dictionary["Friday"].Count, dictionary["Saturday"].Count} });
        return dictionary;
    }

    public class ReaderEvent
    {
        public string Time { get; }
        public string Location { get; }
        public string ReaderDesc { get; }
        public string IDHash { get; }
        public int DevID { get; }
        public int Machine { get; }

        public ReaderEvent(string time, string location, string readerDesc, string idHash, int devID, int machine)
        {
            Time = time;
            Location = location;
            ReaderDesc = readerDesc;
            IDHash = idHash;
            DevID = devID;
            Machine = machine;
        }
    }
}
